<#include "/macro.include"/>
<#assign className = table.className>   
<#assign classNameFirstLower = table.classNameFirstLower>   
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<#macro mapperEl value>${r"#{"}${value}}</#macro>
<#macro namespace>${className}.</#macro>
<mapper namespace="${basepackage}.dao.${className}Mapper">
	<resultMap id="RM_${classNameFirstLower}" type="${basepackage}.model.${className}">
        <#list table.columns as column>
        <result property="${column.columnNameLower}" column="${column.sqlName}" />
		</#list>
	</resultMap>
	
	<sql id="${classNameFirstLower}_columns">
	    <![CDATA[
		<#list table.columns as column>${column.sqlName}<#if column_has_next>,</#if></#list>
	    ]]>
	</sql>
	
	<insert id="insert" useGeneratedKeys="true" keyProperty="${table.idColumn.columnNameFirstLower}">
    <![CDATA[
        INSERT INTO ${table.sqlName} (
        <#list table.columns as column> ${column.sqlName}<#if column_has_next>,</#if></#list>
        ) VALUES (
        <#list table.columns as column> <@mapperEl column.columnNameFirstLower/><#if column_has_next>,</#if></#list>        
        )
    ]]>
	</insert>
    
	<update id="update" >
    <![CDATA[
        UPDATE ${table.sqlName} SET
	        <#list table.notPkColumns as column>${column.sqlName} = <@mapperEl column.columnNameFirstLower/> <#if column_has_next>,</#if> </#list>
        WHERE 
        	<#list table.compositeIdColumns as column>${column.sqlName} = <@mapperEl column.columnNameLower /> <#if column_has_next> AND </#if> </#list>	        
    ]]>
	</update>

    <delete id="delete">
    <![CDATA[
        DELETE FROM ${table.sqlName} WHERE
        <#list table.compositeIdColumns as column>
        ${column.sqlName} = <@mapperEl 'id'/> <#if column_has_next> AND </#if>
		</#list>
    ]]>
    </delete>
    
    <select id="findById" resultMap="RM_${classNameFirstLower}">
		SELECT <include refid="${classNameFirstLower}_columns" />
	    <![CDATA[
		    FROM ${table.sqlName} 
	        WHERE 
				<#list table.compositeIdColumns as column>
		        ${column.sqlName} = <@mapperEl 'id'/> <#if column_has_next> AND </#if>
		        </#list>    
	    ]]>
	</select>
	
	<select id="findPage" parameterType="map" resultMap="RM_${classNameFirstLower}">
	 SELECT <include refid="${classNameFirstLower}_columns" />  FROM ${table.sqlName}  
		<where>	      				
	       <#list table.columns as column> 
	       <if test="@Ognl@isNotEmpty(${column.columnNameFirstLower})">
				AND ${column.sqlName} = <@mapperEl column.columnNameFirstLower/>
			</if>
	       </#list>			
		</where>
	</select>


    <#list table.columns as column>
    <#if column.unique && !column.pk>
    <select id="findBy${column.columnName}" resultMap="RM_${classNameFirstLower}" parameterType="${column.javaType}">
	    SELECT <include refid="${classNameFirstLower}_columns"/>
	    FROM ${table.sqlName} where ${column.sqlName} = <@mapperEl column.columnNameLower/>
    </select>
    
    </#if>
	</#list>
	
</mapper>

